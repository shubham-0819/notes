{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#links","title":"Links","text":"<ul> <li>essential shell tools</li> <li>vscode extensions</li> <li>apache</li> </ul>"},{"location":"apache/","title":"Apache2 Installation and Configuration User Manual","text":""},{"location":"apache/#overview","title":"Overview","text":"<p>Apache2 is one of the most popular and versatile web servers available. This guide provides a concise walkthrough for installing and configuring Apache2 on a Linux system. It assumes a basic understanding of Linux commands and system administration.</p>"},{"location":"apache/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Installation</li> <li>Basic Configuration</li> <li>Managing Apache2 Service</li> <li>Testing the Installation</li> <li>Troubleshooting</li> <li>Useful Commands and Files</li> </ol>"},{"location":"apache/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>A Linux-based operating system (e.g., Ubuntu, Debian )</li> <li>A user with <code>sudo</code> privileges</li> <li>Basic knowledge of Linux commands and file editing</li> </ul>"},{"location":"apache/#2-installation","title":"2. Installation","text":"<pre><code>sudo apt update\nsudo apt install apache2\n</code></pre>"},{"location":"apache/#3-basic-configuration","title":"3. Basic Configuration","text":""},{"location":"apache/#configuration-files","title":"Configuration Files","text":"<ul> <li>Main Configuration File: <code>/etc/apache2/apache2.conf</code></li> <li>Virtual Hosts Configuration: <code>/etc/apache2/sites-available/</code></li> <li>Additional Configuration Files: <code>/etc/apache2/conf-available/</code></li> </ul>"},{"location":"apache/#key-configuration-directives","title":"Key Configuration Directives","text":"<ul> <li>ServerName: Set the hostname of your server.   <code>apache   ServerName www.example.com</code></li> <li>DocumentRoot: Define the directory from which Apache will serve files.   <code>apache   DocumentRoot /var/www/html</code></li> <li>Directory Permissions: Configure permissions for directories.   <code>apache   &lt;Directory /var/www/html&gt;       Options Indexes FollowSymLinks       AllowOverride None       Require all granted   &lt;/Directory&gt;</code></li> </ul>"},{"location":"apache/#virtual-hosts","title":"Virtual Hosts","text":"<p>Virtual Hosts allow you to run multiple websites on a single server. </p> <p>Create a Virtual Host Configuration File:</p> <ol> <li>Create a new file in <code>/etc/apache2/sites-available/</code></li> </ol> <p><code>bash    sudo nano /etc/apache2/sites-available/example.com.conf</code></p> <ol> <li>Add the following configuration:</li> </ol> <p>```apache            ServerAdmin webmaster@example.com        ServerName example.com        DocumentRoot /var/www/example.com <pre><code>   &lt;Directory /var/www/example.com&gt;\n       Options Indexes FollowSymLinks\n       AllowOverride All\n       Require all granted\n   &lt;/Directory&gt;\n\n   ErrorLog ${APACHE_LOG_DIR}/error.log\n   CustomLog ${APACHE_LOG_DIR}/access.log combined\n</code></pre> <p>    ```</p> <ol> <li>Enable the Virtual Host (Ubuntu/Debian):</li> </ol> <p><code>bash    sudo a2ensite example.com.conf</code></p> <ol> <li>Restart Apache2 to apply changes:</li> </ol> <p><code>bash    sudo systemctl restart apache2</code></p>"},{"location":"apache/#4-managing-apache2-service","title":"4. Managing Apache2 Service","text":""},{"location":"apache/#start-stop-and-restart-apache2","title":"Start, Stop, and Restart Apache2","text":"<pre><code>sudo systemctl start apache2     # Start Apache\nsudo systemctl stop apache2      # Stop Apache\nsudo systemctl restart apache2   # Restart Apache\nsudo systemctl reload apache2    # Reload configuration without restarting\n</code></pre>"},{"location":"apache/#check-apache2-status","title":"Check Apache2 Status","text":"<pre><code>sudo systemctl status apache2\n</code></pre>"},{"location":"apache/#5-testing-the-installation","title":"5. Testing the Installation","text":"<ol> <li> <p>Check Apache2 Status: Ensure Apache2 is running.    <code>bash    sudo systemctl status apache2</code></p> </li> <li> <p>Access Default Page: Open a web browser and navigate to <code>http://localhost</code>. You should see the Apache2 default welcome page.</p> </li> <li> <p>Check Configuration Syntax: Ensure your configuration files are correctly formatted.    <code>bash    sudo apache2ctl configtest</code></p> </li> </ol>"},{"location":"apache/#6-troubleshooting","title":"6. Troubleshooting","text":"<ul> <li>Logs: Check Apache2 logs for errors.</li> <li>Access Log: <code>/var/log/apache2/access.log</code></li> <li> <p>Error Log: <code>/var/log/apache2/error.log</code></p> </li> <li> <p>Permissions: Ensure the Apache2 user has appropriate permissions to access the directories.</p> </li> <li> <p>Firewall: Ensure that your firewall allows HTTP/HTTPS traffic.   <code>bash   sudo ufw allow 'Apache Full'</code></p> </li> </ul>"},{"location":"apache/#7-useful-commands-and-files","title":"7. Useful Commands and Files","text":"<ul> <li> <p>View Apache2 Version:   <code>bash   apache2 -v</code></p> </li> <li> <p>List Enabled Modules (Ubuntu/Debian):   <code>bash   sudo apache2ctl -M</code></p> </li> <li> <p>Manage Modules:</p> </li> <li>Enable a Module:     <code>bash     sudo a2enmod module_name</code></li> <li> <p>Disable a Module:     <code>bash     sudo a2dismod module_name</code></p> </li> <li> <p>Configuration Test:   <code>bash   sudo apache2ctl configtest</code></p> </li> <li> <p>Reload Apache2 (to apply configuration changes):   <code>bash   sudo systemctl reload apache2</code></p> </li> </ul>"},{"location":"data-structure/","title":"Data structure in C","text":""},{"location":"data-structure/#recursion","title":"Recursion:","text":"<p>Recursion is a programming technique where a function calls itself directly or indirectly. It's often used in solving problems that can be broken down into smaller, similar sub-problems.</p> <p>Example: Factorial calculation using recursion.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint factorial(int n) {\n    if (n &lt;= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d = %d\\n\", num, factorial(num));\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#arrays","title":"Arrays:","text":"<p>Arrays are collections of elements of the same data type stored in contiguous memory locations.</p> <p>Example: Finding the maximum element in an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int max = arr[0];\n\n    for (int i = 1; i &lt; size; i++) {\n        if (arr[i] &gt; max)\n            max = arr[i];\n    }\n\n    printf(\"Maximum element in the array: %d\\n\", max);\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#stack","title":"Stack:","text":"<p>A stack is a data structure that follows the Last In, First Out (LIFO) principle. Elements are inserted and removed from the same end, called the top.</p> <p>Example: Implementation of a stack using an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_SIZE 100\n\nint stack[MAX_SIZE];\nint top = -1;\n\nvoid push(int item) {\n    if (top == MAX_SIZE - 1) {\n        printf(\"Stack Overflow\\n\");\n        return;\n    }\n    stack[++top] = item;\n}\n\nint pop() {\n    if (top == -1) {\n        printf(\"Stack Underflow\\n\");\n        return -1;\n    }\n    return stack[top--];\n}\n\nint main() {\n    push(10);\n    push(20);\n    push(30);\n\n    printf(\"Popped item: %d\\n\", pop());\n    printf(\"Popped item: %d\\n\", pop());\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#queues","title":"Queues:","text":"<p>A queue is a data structure that follows the First In, First Out (FIFO) principle. Elements are inserted from the rear and removed from the front.</p> <p>Example: Implementation of a queue using an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_SIZE 100\n\nint queue[MAX_SIZE];\nint front = -1, rear = -1;\n\nvoid enqueue(int item) {\n    if (rear == MAX_SIZE - 1) {\n        printf(\"Queue Overflow\\n\");\n        return;\n    }\n    if (front == -1)\n        front = 0;\n    queue[++rear] = item;\n}\n\nint dequeue() {\n    if (front == -1 || front &gt; rear) {\n        printf(\"Queue Underflow\\n\");\n        return -1;\n    }\n    return queue[front++];\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n\n    printf(\"Dequeued item: %d\\n\", dequeue());\n    printf(\"Dequeued item: %d\\n\", dequeue());\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#linked-list","title":"Linked List:","text":"<p>A linked list is a linear data structure where elements are stored in nodes, and each node points to the next node in the sequence.</p> <p>Example: Implementation of a singly linked list.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node *head = NULL;\n\nvoid insert(int value) {\n    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));\n    newNode-&gt;data = value;\n    newNode-&gt;next = NULL;\n    if (head == NULL) {\n        head = newNode;\n        return;\n    }\n    struct Node *temp = head;\n    while (temp-&gt;next != NULL)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n}\n\nvoid display() {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -&gt; \", temp-&gt;data);\n        temp = temp-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    insert(10);\n    insert(20);\n    insert(30);\n    display();\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#trees","title":"Trees:","text":"<p>A tree is a hierarchical data structure consisting of nodes connected by edges. It has a root node and zero or more child nodes.</p> <p>Example: Implementation of a binary tree.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct TreeNode {\n    int data;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode *createNode(int value) {\n    struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    newNode-&gt;data = value;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n\nint main() {\n    struct TreeNode *root = createNode(1);\n    root-&gt;left = createNode(2);\n    root-&gt;right = createNode(3);\n    root-&gt;left-&gt;left = createNode(4);\n    root-&gt;left-&gt;right = createNode(5);\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#binary-search-trees","title":"Binary Search Trees:","text":"<p>A binary search tree (BST) is a binary tree in which the left child of a node has a value less than the node, and the right child has a value greater than the node.</p> <p>Example: Insertion in a binary search tree.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct TreeNode {\n    int data;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode *createNode(int value) {\n    struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    newNode-&gt;data = value;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n\nstruct TreeNode *insert(struct TreeNode *root, int value) {\n    if (root == NULL)\n        return createNode(value);\n    if (value &lt; root-&gt;data)\n        root-&gt;left = insert(root-&gt;left, value);\n    else if (value &gt; root-&gt;data)\n        root-&gt;right = insert(root-&gt;right, value);\n    return root;\n}\n\nvoid inorderTraversal(struct TreeNode *root) {\n    if (root != NULL) {\n        inorderTraversal(root-&gt;left);\n        printf(\"%d \", root-&gt;data);\n        inorderTraversal(root-&gt;right);\n    }\n}\n\nint main() {\n    struct TreeNode *root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 70);\n    insert(root, 60);\n    insert(root, 80);\n    inorderTraversal(root);\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#binary-heaps","title":"Binary Heaps:","text":"<p>A binary heap is a complete binary tree that satisfies the heap property. It can be a min-heap or max-heap.</p> <p>Example: Insertion in a min-heap.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_SIZE 100\n\nstruct MinHeap {\n    int *array;\n    int size;\n    int capacity;\n};\n\nstruct MinHeap *createMinHeap(int capacity) {\n    struct MinHeap *heap = (struct MinHeap *)malloc(sizeof(struct MinHeap));\n    heap-&gt;capacity = capacity;\n    heap-&gt;size = 0;\n    heap-&gt;array = (int *)malloc(capacity * sizeof(int));\n    return heap;\n}\n\nvoid insert(struct MinHeap *heap, int value) {\n    if (heap-&gt;size == heap-&gt;capacity) {\n        printf(\"Heap Overflow\\n\");\n        return;\n    }\n    int i = heap-&gt;size;\n    heap-&gt;array[i] = value;\n    heap-&gt;size++;\n\n    while (i &gt; 0 &amp;&amp; heap-&gt;array[i] &lt; heap-&gt;array[(i - 1) / 2]) {\n        // Swap parent and child\n        int temp = heap-&gt;array[i];\n        heap-&gt;array[i] = heap-&gt;array[(i - 1) / 2];\n        heap-&gt;array[(i - 1) / 2] = temp;\n        i = (i - 1) / 2;\n    }\n}\n\nvoid display(struct MinHeap *heap) {\n    for (int i = 0; i &lt; heap-&gt;size; i++)\n        printf(\"%d \", heap-&gt;array[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    struct MinHeap *heap = createMinHeap(MAX_SIZE);\n    insert(heap, 3);\n    insert(heap, 2);\n    insert(heap, 1);\n    insert(heap, 15);\n    insert(heap, 5);\n    insert(heap, 4);\n    insert(heap, 45);\n    display(heap);\n    return 0;\n}\n\n</code></pre>"},{"location":"data-structure/#graphs","title":"Graphs:","text":"<p>A graph is a collection of nodes (vertices) and edges that connect pairs of nodes. It can be directed or undirected.</p> <p>Example: Implementation of an undirected graph using adjacency list.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct ListNode {\n    int vertex;\n    struct ListNode *next;\n};\n\nstruct Graph {\n    int numVertices;\n    struct ListNode **adjLists;\n};\n\nstruct ListNode *createNode(int vertex) {\n    struct ListNode *newNode = (struct ListNode *)malloc(sizeof(struct ListNode));\n    newNode-&gt;vertex = vertex;\n    newNode-&gt;next = NULL;\n    return newNode;\n}\n\nstruct Graph *createGraph(int numVertices) {\n    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));\n    graph-&gt;numVertices = numVertices;\n    graph-&gt;adjLists = (struct ListNode **)malloc(numVertices * sizeof(struct ListNode *));\n    for (int i = 0; i &lt; numVertices; i++)\n        graph-&gt;adjLists[i] = NULL;\n    return graph;\n}\n\nvoid addEdge(struct Graph *graph, int src, int dest) {\n    struct ListNode *newNode = createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n\n    newNode = createNode(src);\n    newNode-&gt;next = graph-&gt;adjLists[dest];\n    graph-&gt;adjLists[dest] = newNode;\n}\n\nvoid display(struct Graph *graph) {\n    for (int i = 0; i &lt; graph-&gt;numVertices; i++) {\n        struct ListNode *temp = graph-&gt;adjLists[i];\n        printf(\"Adjacency list of vertex %d: \", i);\n        while (temp != NULL) {\n            printf(\"%d -&gt; \", temp-&gt;vertex);\n            temp = temp-&gt;next;\n        }\n        printf(\"NULL\\n\");\n    }\n}\n\nint main() {\n    struct Graph *graph = createGraph(4);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 2, 3);\n    display(graph);\n    return 0;\n}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"ide/essential-shell-tools/","title":"Essential shell tolls","text":""},{"location":"ide/essential-shell-tools/#system-resource-monitoring","title":"System resource monitoring","text":""},{"location":"ide/essential-shell-tools/#top","title":"top","text":"<ul> <li>Description: Provides a dynamic real-time view of the system\u2019s resource usage, including CPU, memory, and process information.</li> <li>Installation: <code>top</code> is usually pre-installed on most Linux distributions.</li> <li>Usage: Run <code>top</code> in the terminal. Press <code>q</code> to quit. You can press <code>1</code> to view CPU usage per core.</li> </ul>"},{"location":"ide/essential-shell-tools/#htop","title":"htop","text":"<ul> <li>Description: An enhanced version of <code>top</code> with a more user-friendly, ncurses-based interface that includes a visual representation of CPU and memory usage.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install htop</code></li> <li>Usage: Run <code>htop</code> in the terminal. Use the arrow keys to navigate, and press <code>F10</code> to exit.</li> </ul>"},{"location":"ide/essential-shell-tools/#vmstat","title":"vmstat","text":"<ul> <li>Description: Reports information about processes, memory, paging, block IO, traps, and CPU activity.</li> <li>Installation: <code>vmstat</code> is usually pre-installed.</li> <li>Usage: Run <code>vmstat 1</code> to get a continuous report every second. Press <code>Ctrl+C</code> to stop.</li> </ul>"},{"location":"ide/essential-shell-tools/#iostat","title":"iostat","text":"<ul> <li>Description: Reports CPU and I/O statistics, which helps in understanding the load on the system's disks.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install sysstat</code></li> <li>Usage: Run <code>iostat 1</code> to get continuous reports every second. Press <code>Ctrl+C</code> to stop.</li> </ul>"},{"location":"ide/essential-shell-tools/#sar","title":"sar","text":"<ul> <li>Description: Collects, reports, and saves system activity information. Useful for historical data analysis.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install sysstat</code></li> <li>Usage: To collect data: <code>sar -u 1 3</code> (CPU usage every second for 3 iterations). Use <code>sar -o file</code> to save to a file and <code>sar -f file</code> to read from it.</li> </ul>"},{"location":"ide/essential-shell-tools/#dstat","title":"dstat","text":"<ul> <li>Description: Versatile resource statistics tool that can replace vmstat, iostat, netstat, and ifstat.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install dstat</code></li> <li>Usage: Run <code>dstat</code> to see a live report of various system metrics. Use <code>dstat -cnd</code> to get CPU, network, and disk stats.</li> </ul>"},{"location":"ide/essential-shell-tools/#nload","title":"nload*","text":"<ul> <li>Description: Provides a visual representation of incoming and outgoing traffic separately.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install nload</code></li> <li>Usage: Run <code>nload</code> to see real-time network traffic. Use arrow keys to switch between network interfaces.</li> </ul>"},{"location":"ide/essential-shell-tools/#glances","title":"glances","text":"<ul> <li>Description: A cross-platform monitoring tool that provides a comprehensive overview of system resources, including CPU, memory, network, and disk usage.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install glances</code></li> <li>Usage: Run <code>glances</code> in the terminal. Use <code>q</code> to quit.</li> </ul>"},{"location":"ide/essential-shell-tools/#free","title":"free","text":"<ul> <li>Description: Displays information about total, used, free, shared, and buffered memory.</li> <li>Installation: <code>free</code> is usually pre-installed.</li> <li>Usage: Run <code>free -h</code> for human-readable format. Use <code>free -m</code> for memory in megabytes.</li> </ul>"},{"location":"ide/essential-shell-tools/#iftop","title":"iftop","text":"<ul> <li>Description: Displays bandwidth usage on an interface in real-time.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install iftop</code></li> <li>Usage: Run <code>sudo iftop</code> to monitor network traffic. Press <code>q</code> to quit.</li> </ul>"},{"location":"ide/vscode-extensions/","title":"vscode extensions","text":""}]}