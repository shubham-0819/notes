{"config":{"lang":["en"],"separator":"- \\s\\u200b\\-_,:!=\\- \\]()\"`/]+|\\.(?!\\d)|&- lg]t;|(?!\\b)(?=- A-Z]- a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#notes","title":"Notes","text":"<ul> <li>essential shell tools</li> <li>vscode extensions</li> <li>apache</li> <li>overview of storage in an operating system</li> <li>PostgreSQL Installation and Basic Usage</li> <li>How to use copilot</li> </ul>"},{"location":"apache/","title":"Apache2 Installation and Configuration User Manual","text":""},{"location":"apache/#overview","title":"Overview","text":"<p>Apache2 is one of the most popular and versatile web servers available. This guide provides a concise walkthrough for installing and configuring Apache2 on a Linux system. It assumes a basic understanding of Linux commands and system administration.</p>"},{"location":"apache/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Installation</li> <li>Basic Configuration</li> <li>Managing Apache2 Service</li> <li>Testing the Installation</li> <li>Troubleshooting</li> <li>Useful Commands and Files</li> </ol>"},{"location":"apache/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>A Linux-based operating system (e.g., Ubuntu, Debian )</li> <li>A user with <code>sudo</code> privileges</li> <li>Basic knowledge of Linux commands and file editing</li> </ul>"},{"location":"apache/#2-installation","title":"2. Installation","text":"<pre><code>sudo apt update\nsudo apt install apache2\n</code></pre>"},{"location":"apache/#3-basic-configuration","title":"3. Basic Configuration","text":""},{"location":"apache/#configuration-files","title":"Configuration Files","text":"<ul> <li>Main Configuration File: <code>/etc/apache2/apache2.conf</code></li> <li>Virtual Hosts Configuration: <code>/etc/apache2/sites-available/</code></li> <li>Additional Configuration Files: <code>/etc/apache2/conf-available/</code></li> </ul>"},{"location":"apache/#key-configuration-directives","title":"Key Configuration Directives","text":"<ul> <li>ServerName: Set the hostname of your server.   <code>apache   ServerName www.example.com</code></li> <li>DocumentRoot: Define the directory from which Apache will serve files.   <code>apache   DocumentRoot /var/www/html</code></li> <li>Directory Permissions: Configure permissions for directories.   <code>apache   &lt;Directory /var/www/html&gt;       Options Indexes FollowSymLinks       AllowOverride None       Require all granted   &lt;/Directory&gt;</code></li> </ul>"},{"location":"apache/#virtual-hosts","title":"Virtual Hosts","text":"<p>Virtual Hosts allow you to run multiple websites on a single server. </p> <p>Create a Virtual Host Configuration File:</p> <ol> <li>Create a new file in <code>/etc/apache2/sites-available/</code></li> </ol> <p><code>bash    sudo nano /etc/apache2/sites-available/example.com.conf</code></p> <ol> <li>Add the following configuration:</li> </ol> <p>```apache            ServerAdmin webmaster@example.com        ServerName example.com        DocumentRoot /var/www/example.com <pre><code>   &lt;Directory /var/www/example.com&gt;\n       Options Indexes FollowSymLinks\n       AllowOverride All\n       Require all granted\n   &lt;/Directory&gt;\n\n   ErrorLog ${APACHE_LOG_DIR}/error.log\n   CustomLog ${APACHE_LOG_DIR}/access.log combined\n</code></pre> <p>    ```</p> <ol> <li>Enable the Virtual Host (Ubuntu/Debian):</li> </ol> <p><code>bash    sudo a2ensite example.com.conf</code></p> <ol> <li>Restart Apache2 to apply changes:</li> </ol> <p><code>bash    sudo systemctl restart apache2</code></p>"},{"location":"apache/#4-managing-apache2-service","title":"4. Managing Apache2 Service","text":""},{"location":"apache/#start-stop-and-restart-apache2","title":"Start, Stop, and Restart Apache2","text":"<pre><code>sudo systemctl start apache2     # Start Apache\nsudo systemctl stop apache2      # Stop Apache\nsudo systemctl restart apache2   # Restart Apache\nsudo systemctl reload apache2    # Reload configuration without restarting\n</code></pre>"},{"location":"apache/#check-apache2-status","title":"Check Apache2 Status","text":"<pre><code>sudo systemctl status apache2\n</code></pre>"},{"location":"apache/#5-testing-the-installation","title":"5. Testing the Installation","text":"<ol> <li> <p>Check Apache2 Status: Ensure Apache2 is running.    <code>bash    sudo systemctl status apache2</code></p> </li> <li> <p>Access Default Page: Open a web browser and navigate to <code>http://localhost</code>. You should see the Apache2 default welcome page.</p> </li> <li> <p>Check Configuration Syntax: Ensure your configuration files are correctly formatted.    <code>bash    sudo apache2ctl configtest</code></p> </li> </ol>"},{"location":"apache/#6-troubleshooting","title":"6. Troubleshooting","text":"<ul> <li>Logs: Check Apache2 logs for errors.</li> <li>Access Log: <code>/var/log/apache2/access.log</code></li> <li> <p>Error Log: <code>/var/log/apache2/error.log</code></p> </li> <li> <p>Permissions: Ensure the Apache2 user has appropriate permissions to access the directories.</p> </li> <li> <p>Firewall: Ensure that your firewall allows HTTP/HTTPS traffic.   <code>bash   sudo ufw allow 'Apache Full'</code></p> </li> </ul>"},{"location":"apache/#7-useful-commands-and-files","title":"7. Useful Commands and Files","text":"<ul> <li> <p>View Apache2 Version:   <code>bash   apache2 -v</code></p> </li> <li> <p>List Enabled Modules (Ubuntu/Debian):   <code>bash   sudo apache2ctl -M</code></p> </li> <li> <p>Manage Modules:</p> </li> <li>Enable a Module:     <code>bash     sudo a2enmod module_name</code></li> <li> <p>Disable a Module:     <code>bash     sudo a2dismod module_name</code></p> </li> <li> <p>Configuration Test:   <code>bash   sudo apache2ctl configtest</code></p> </li> <li> <p>Reload Apache2 (to apply configuration changes):   <code>bash   sudo systemctl reload apache2</code></p> </li> </ul>"},{"location":"best-practices-for-using-genai/","title":"Best practices for building apps using GenAI APIs.","text":""},{"location":"best-practices-for-using-genai/#1-use-the-right-model-for-the-right-task","title":"1. Use the Right Model for the Right Task","text":"<ul> <li>Select Lightweight Models for Simple Tasks: Use smaller, cheaper models like GPT-3.5 Turbo for simpler tasks (e.g., text completion or sentiment analysis), reserving more powerful models (like GPT-4) for complex tasks (e.g., multi-step reasoning).</li> <li>Optimize Based on Use Cases: Categorize tasks based on complexity and frequency, and assign different models accordingly. For example, Codex for code generation and DALL-E for image generation, using lower-cost models where possible.</li> </ul>"},{"location":"best-practices-for-using-genai/#2-implement-caching-and-reuse-responses","title":"2. Implement Caching and Reuse Responses","text":"<ul> <li>Cache Repeated Queries: If your app is making similar queries frequently, cache responses and reuse them. This avoids redundant API calls and reduces costs.</li> <li>Store Results Locally: For static or repetitive data generation, store responses in a local database instead of calling the API repeatedly.</li> </ul>"},{"location":"best-practices-for-using-genai/#3-minimize-token-usage","title":"3. Minimize Token Usage","text":"<ul> <li>Shorter Prompts: LLMs like GPT models charge based on tokens used (both input and output). Keep prompts concise and to the point to reduce token consumption.</li> <li>Limit Output Length: Use the <code>max_tokens</code> parameter to control the length of responses and avoid unnecessarily long completions.</li> </ul>"},{"location":"best-practices-for-using-genai/#4-use-prompt-engineering-techniques","title":"4. Use Prompt Engineering Techniques","text":"<ul> <li>Prompt Optimization: Carefully craft prompts to get the most precise and accurate responses in fewer tokens. By reducing ambiguity, you can avoid making follow-up calls or re-tries.</li> <li>Chain-of-Thought: For complex tasks, break down the queries into smaller, simpler steps that can be handled by cheaper models or processes, and avoid unnecessarily complex operations.</li> </ul>"},{"location":"best-practices-for-using-genai/#5-fine-tune-for-specialized-tasks","title":"5. Fine-tune for Specialized Tasks","text":"<ul> <li>Fine-tuning: If your application relies on repeated, domain-specific queries, consider fine-tuning a smaller model (if available) on your specific dataset. This allows the model to become more efficient at your tasks, reducing the need for complex prompts.</li> <li>Preprocess and Post-process Locally: Offload pre-processing (e.g., data cleaning, summarizing) and post-processing tasks (e.g., formatting) to local servers to reduce API calls.</li> </ul>"},{"location":"best-practices-for-using-genai/#6-rate-limiting-and-throttling","title":"6. Rate Limiting and Throttling","text":"<ul> <li>Rate Limits: Set rate limits on API calls to avoid accidental overuse, especially when scaling up. Many APIs charge based on the number of requests, so throttling can help control costs.</li> <li>Batch Requests: Where possible, batch requests or combine multiple tasks into a single API call (if the API supports it).</li> </ul>"},{"location":"best-practices-for-using-genai/#7-use-lower-priced-deployment-options","title":"7. Use Lower-Priced Deployment Options","text":"<ul> <li>Model Pricing Tiers: Leverage different pricing tiers, and use free trial periods or credits offered by the API providers for initial development and testing.</li> <li>Regional API Endpoints: If the provider offers regional pricing differences, you can select endpoints that may offer lower costs depending on geographic regions.</li> </ul>"},{"location":"best-practices-for-using-genai/#8-monitor-and-track-usage","title":"8. Monitor and Track Usage","text":"<ul> <li>Usage Metrics: Implement logging and tracking of all API usage so you can identify high-cost areas, optimize them, and avoid unnecessary calls.</li> <li>Budget Alerts: Set up budget alerts or limits via the API provider\u2019s platform to ensure you don\u2019t exceed your desired spending.</li> </ul>"},{"location":"best-practices-for-using-genai/#9-hybrid-approaches","title":"9. Hybrid Approaches","text":"<ul> <li>On-Premise or Open Source: For tasks that require constant, high-volume processing, consider using open-source models like GPT-Neo or running LLMs locally (though they may be less powerful). This can supplement your API-based usage and reduce costs.</li> <li>Manual Overrides: Provide human overrides for extremely complex or high-cost processes to avoid relying on the LLM for all decision-making.</li> </ul>"},{"location":"best-practices-for-using-genai/#10-periodic-audits-and-optimization","title":"10. Periodic Audits and Optimization","text":"<ul> <li>Review API Usage Regularly: Periodically audit your API calls and results. Review patterns to identify where your app might be over-relying on the AI and optimize accordingly.</li> <li>A/B Testing for Cost Efficiency: Test different versions of your prompt structures, models, and batching strategies to find the most cost-efficient solution without sacrificing performance.</li> </ul>"},{"location":"best-practices-for-using-genai/#example-strategy","title":"Example Strategy:","text":"<ul> <li>Chat and Text Generation: Use GPT-3.5, GPT-4o-mini, Turbo for conversational interfaces or text generation where high precision is not critical. Implement caching for repeated answers.</li> <li>Summarization and Question Answering: Use a lower-token limit and carefully engineered prompts to get concise summaries. If questions are repetitive, cache them.</li> <li>Complex Reasoning or High-Stakes Output: Delegate to GPT-4, GPT-4o, GPT-4o-mini or fine-tuned models only when necessary.</li> </ul>"},{"location":"data-structure/","title":"Data structure in C","text":""},{"location":"data-structure/#recursion","title":"Recursion:","text":"<p>Recursion is a programming technique where a function calls itself directly or indirectly. It's often used in solving problems that can be broken down into smaller, similar sub-problems.</p> <p>Example: Factorial calculation using recursion.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint factorial(int n) {\n    if (n &lt;= 1)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d = %d\\n\", num, factorial(num));\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#arrays","title":"Arrays:","text":"<p>Arrays are collections of elements of the same data type stored in contiguous memory locations.</p> <p>Example: Finding the maximum element in an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    int max = arr[0];\n\n    for (int i = 1; i &lt; size; i++) {\n        if (arr[i] &gt; max)\n            max = arr[i];\n    }\n\n    printf(\"Maximum element in the array: %d\\n\", max);\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#stack","title":"Stack:","text":"<p>A stack is a data structure that follows the Last In, First Out (LIFO) principle. Elements are inserted and removed from the same end, called the top.</p> <p>Example: Implementation of a stack using an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_SIZE 100\n\nint stack[MAX_SIZE];\nint top = -1;\n\nvoid push(int item) {\n    if (top == MAX_SIZE - 1) {\n        printf(\"Stack Overflow\\n\");\n        return;\n    }\n    stack[++top] = item;\n}\n\nint pop() {\n    if (top == -1) {\n        printf(\"Stack Underflow\\n\");\n        return -1;\n    }\n    return stack[top--];\n}\n\nint main() {\n    push(10);\n    push(20);\n    push(30);\n\n    printf(\"Popped item: %d\\n\", pop());\n    printf(\"Popped item: %d\\n\", pop());\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#queues","title":"Queues:","text":"<p>A queue is a data structure that follows the First In, First Out (FIFO) principle. Elements are inserted from the rear and removed from the front.</p> <p>Example: Implementation of a queue using an array.</p> <pre><code>#include &lt;stdio.h&gt;\n\n#define MAX_SIZE 100\n\nint queue[MAX_SIZE];\nint front = -1, rear = -1;\n\nvoid enqueue(int item) {\n    if (rear == MAX_SIZE - 1) {\n        printf(\"Queue Overflow\\n\");\n        return;\n    }\n    if (front == -1)\n        front = 0;\n    queue[++rear] = item;\n}\n\nint dequeue() {\n    if (front == -1 || front &gt; rear) {\n        printf(\"Queue Underflow\\n\");\n        return -1;\n    }\n    return queue[front++];\n}\n\nint main() {\n    enqueue(10);\n    enqueue(20);\n    enqueue(30);\n\n    printf(\"Dequeued item: %d\\n\", dequeue());\n    printf(\"Dequeued item: %d\\n\", dequeue());\n\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#linked-list","title":"Linked List:","text":"<p>A linked list is a linear data structure where elements are stored in nodes, and each node points to the next node in the sequence.</p> <p>Example: Implementation of a singly linked list.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\nstruct Node *head = NULL;\n\nvoid insert(int value) {\n    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));\n    newNode-&gt;data = value;\n    newNode-&gt;next = NULL;\n    if (head == NULL) {\n        head = newNode;\n        return;\n    }\n    struct Node *temp = head;\n    while (temp-&gt;next != NULL)\n        temp = temp-&gt;next;\n    temp-&gt;next = newNode;\n}\n\nvoid display() {\n    struct Node *temp = head;\n    while (temp != NULL) {\n        printf(\"%d -&gt; \", temp-&gt;data);\n        temp = temp-&gt;next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    insert(10);\n    insert(20);\n    insert(30);\n    display();\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#trees","title":"Trees:","text":"<p>A tree is a hierarchical data structure consisting of nodes connected by edges. It has a root node and zero or more child nodes.</p> <p>Example: Implementation of a binary tree.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct TreeNode {\n    int data;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode *createNode(int value) {\n    struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    newNode-&gt;data = value;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n\nint main() {\n    struct TreeNode *root = createNode(1);\n    root-&gt;left = createNode(2);\n    root-&gt;right = createNode(3);\n    root-&gt;left-&gt;left = createNode(4);\n    root-&gt;left-&gt;right = createNode(5);\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#binary-search-trees","title":"Binary Search Trees:","text":"<p>A binary search tree (BST) is a binary tree in which the left child of a node has a value less than the node, and the right child has a value greater than the node.</p> <p>Example: Insertion in a binary search tree.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct TreeNode {\n    int data;\n    struct TreeNode *left;\n    struct TreeNode *right;\n};\n\nstruct TreeNode *createNode(int value) {\n    struct TreeNode *newNode = (struct TreeNode *)malloc(sizeof(struct TreeNode));\n    newNode-&gt;data = value;\n    newNode-&gt;left = NULL;\n    newNode-&gt;right = NULL;\n    return newNode;\n}\n\nstruct TreeNode *insert(struct TreeNode *root, int value) {\n    if (root == NULL)\n        return createNode(value);\n    if (value &lt; root-&gt;data)\n        root-&gt;left = insert(root-&gt;left, value);\n    else if (value &gt; root-&gt;data)\n        root-&gt;right = insert(root-&gt;right, value);\n    return root;\n}\n\nvoid inorderTraversal(struct TreeNode *root) {\n    if (root != NULL) {\n        inorderTraversal(root-&gt;left);\n        printf(\"%d \", root-&gt;data);\n        inorderTraversal(root-&gt;right);\n    }\n}\n\nint main() {\n    struct TreeNode *root = NULL;\n    root = insert(root, 50);\n    insert(root, 30);\n    insert(root, 20);\n    insert(root, 40);\n    insert(root, 70);\n    insert(root, 60);\n    insert(root, 80);\n    inorderTraversal(root);\n    return 0;\n}\n</code></pre>"},{"location":"data-structure/#binary-heaps","title":"Binary Heaps:","text":"<p>A binary heap is a complete binary tree that satisfies the heap property. It can be a min-heap or max-heap.</p> <p>Example: Insertion in a min-heap.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_SIZE 100\n\nstruct MinHeap {\n    int *array;\n    int size;\n    int capacity;\n};\n\nstruct MinHeap *createMinHeap(int capacity) {\n    struct MinHeap *heap = (struct MinHeap *)malloc(sizeof(struct MinHeap));\n    heap-&gt;capacity = capacity;\n    heap-&gt;size = 0;\n    heap-&gt;array = (int *)malloc(capacity * sizeof(int));\n    return heap;\n}\n\nvoid insert(struct MinHeap *heap, int value) {\n    if (heap-&gt;size == heap-&gt;capacity) {\n        printf(\"Heap Overflow\\n\");\n        return;\n    }\n    int i = heap-&gt;size;\n    heap-&gt;array[i] = value;\n    heap-&gt;size++;\n\n    while (i &gt; 0 &amp;&amp; heap-&gt;array[i] &lt; heap-&gt;array[(i - 1) / 2]) {\n        // Swap parent and child\n        int temp = heap-&gt;array[i];\n        heap-&gt;array[i] = heap-&gt;array[(i - 1) / 2];\n        heap-&gt;array[(i - 1) / 2] = temp;\n        i = (i - 1) / 2;\n    }\n}\n\nvoid display(struct MinHeap *heap) {\n    for (int i = 0; i &lt; heap-&gt;size; i++)\n        printf(\"%d \", heap-&gt;array[i]);\n    printf(\"\\n\");\n}\n\nint main() {\n    struct MinHeap *heap = createMinHeap(MAX_SIZE);\n    insert(heap, 3);\n    insert(heap, 2);\n    insert(heap, 1);\n    insert(heap, 15);\n    insert(heap, 5);\n    insert(heap, 4);\n    insert(heap, 45);\n    display(heap);\n    return 0;\n}\n\n</code></pre>"},{"location":"data-structure/#graphs","title":"Graphs:","text":"<p>A graph is a collection of nodes (vertices) and edges that connect pairs of nodes. It can be directed or undirected.</p> <p>Example: Implementation of an undirected graph using adjacency list.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstruct ListNode {\n    int vertex;\n    struct ListNode *next;\n};\n\nstruct Graph {\n    int numVertices;\n    struct ListNode **adjLists;\n};\n\nstruct ListNode *createNode(int vertex) {\n    struct ListNode *newNode = (struct ListNode *)malloc(sizeof(struct ListNode));\n    newNode-&gt;vertex = vertex;\n    newNode-&gt;next = NULL;\n    return newNode;\n}\n\nstruct Graph *createGraph(int numVertices) {\n    struct Graph *graph = (struct Graph *)malloc(sizeof(struct Graph));\n    graph-&gt;numVertices = numVertices;\n    graph-&gt;adjLists = (struct ListNode **)malloc(numVertices * sizeof(struct ListNode *));\n    for (int i = 0; i &lt; numVertices; i++)\n        graph-&gt;adjLists[i] = NULL;\n    return graph;\n}\n\nvoid addEdge(struct Graph *graph, int src, int dest) {\n    struct ListNode *newNode = createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n\n    newNode = createNode(src);\n    newNode-&gt;next = graph-&gt;adjLists[dest];\n    graph-&gt;adjLists[dest] = newNode;\n}\n\nvoid display(struct Graph *graph) {\n    for (int i = 0; i &lt; graph-&gt;numVertices; i++) {\n        struct ListNode *temp = graph-&gt;adjLists[i];\n        printf(\"Adjacency list of vertex %d: \", i);\n        while (temp != NULL) {\n            printf(\"%d -&gt; \", temp-&gt;vertex);\n            temp = temp-&gt;next;\n        }\n        printf(\"NULL\\n\");\n    }\n}\n\nint main() {\n    struct Graph *graph = createGraph(4);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 2, 3);\n    display(graph);\n    return 0;\n}\n</code></pre>"},{"location":"genai-models-by-openai/","title":"GenAI Models by openai","text":""},{"location":"genai-models-by-openai/#model-list","title":"Model List","text":""},{"location":"genai-models-by-openai/#text-models","title":"Text Models","text":"Model Description GPT-4o Our high-intelligence flagship model for complex, multi-step tasks GPT-4o mini Our affordable and intelligent small model for fast, lightweight tasks GPT-4 Turbo and GPT-4 The previous set of high-intelligence models GPT-3.5 Turbo A fast, inexpensive model for simple tasks TTS A set of models that can convert text into natural sounding spoken audio Whisper A model that can convert audio into text Embeddings A set of models that can convert text into a numerical form Moderation A fine-tuned model that can detect whether text may be sensitive or unsafe GPT base A set of models without instruction following that can understand as well as generate natural language or code"},{"location":"genai-models-by-openai/#image-models","title":"Image Models","text":"Model Description DALL\u00b7E A model that can generate and edit images given a natural language prompt"},{"location":"genai-models-by-openai/#other-models","title":"Other Models","text":"Model Description Whisper A model that can convert audio into text Moderation A fine-tuned model that can detect whether text may be sensitive or unsafe Embeddings A set of models that can convert text into a numerical form Deprecated A full list of models that have been deprecated along with the suggested replacement"},{"location":"genai-models-by-openai/#usage","title":"Usage","text":""},{"location":"genai-models-by-openai/#1-chatbot-conversational-ai","title":"1. Chatbot / Conversational AI","text":"<ul> <li>Use Case: Creating AI-based chatbots that can hold human-like conversations.</li> <li>Example: Customer support chatbots, personal assistants like Siri or Alexa.</li> <li>Model: GPT-4, GPT-3.5 Turbo.</li> </ul> <p>Key Features:</p> <ul> <li>Contextual understanding of user queries.</li> <li>Multi-turn dialogue handling.</li> <li>Personalized and human-like responses.</li> </ul>"},{"location":"genai-models-by-openai/#2-text-completion","title":"2. Text Completion","text":"<ul> <li>Use Case: Automatically generating or completing text based on partial input.</li> <li>Example: Autocomplete systems, content suggestions, and creative writing.</li> <li>Model: GPT-4, GPT-3.5 Turbo, GPT base.</li> </ul> <p>Key Features:</p> <ul> <li>Fill in the blanks or suggest continuations.</li> <li>Can assist in drafting emails, blogs, stories, etc.</li> </ul>"},{"location":"genai-models-by-openai/#3-summarization","title":"3. Summarization","text":"<ul> <li>Use Case: Summarizing long text into concise, digestible content.</li> <li>Example: Summarizing news articles, reports, research papers.</li> <li>Model: GPT-4, GPT-3.5.</li> </ul> <p>Key Features:</p> <ul> <li>Converts lengthy documents into shorter summaries.</li> <li>Extractive or abstractive summarization.</li> </ul>"},{"location":"genai-models-by-openai/#4-text-classification","title":"4. Text Classification","text":"<ul> <li>Use Case: Categorizing or labeling text based on its content.</li> <li>Example: Sentiment analysis, topic detection, spam detection.</li> <li>Model: GPT-4, GPT-3.5, Embeddings.</li> </ul> <p>Key Features:</p> <ul> <li>Understands text context to assign relevant labels.</li> <li>Can be used in customer feedback analysis or social media monitoring.</li> </ul>"},{"location":"genai-models-by-openai/#5-translation","title":"5. Translation","text":"<ul> <li>Use Case: Translating text from one language to another.</li> <li>Example: Language translation services.</li> <li>Model: GPT-4, GPT-3.5.</li> </ul> <p>Key Features:</p> <ul> <li>Supports translation between multiple languages.</li> <li>Maintains context and meaning in translations.</li> </ul>"},{"location":"genai-models-by-openai/#6-content-generation","title":"6. Content Generation","text":"<ul> <li>Use Case: Generating new content from a given prompt.</li> <li>Example: Writing blog posts, creating product descriptions, generating code.</li> <li>Model: GPT-4, GPT-3.5 Turbo, GPT base.</li> </ul> <p>Key Features:</p> <ul> <li>Generates creative and coherent long-form content.</li> <li>Ideal for marketing, creative writing, and technical documentation.</li> </ul>"},{"location":"genai-models-by-openai/#7-question-answering-qa","title":"7. Question Answering (QA)","text":"<ul> <li>Use Case: Answering questions based on a given prompt or passage.</li> <li>Example: Knowledge-based assistants, educational tools.</li> <li>Model: GPT-4, GPT-3.5.</li> </ul> <p>Key Features:</p> <ul> <li>Provides accurate and relevant answers to questions.</li> <li>Can handle fact-based and reasoning-based queries.</li> </ul>"},{"location":"genai-models-by-openai/#8-code-generation-completion","title":"8. Code Generation &amp; Completion","text":"<ul> <li>Use Case: Writing or completing code based on user input.</li> <li>Example: Code assistants (e.g., GitHub Copilot), debugging tools.</li> <li>Model: Codex (based on GPT), GPT-4.</li> </ul> <p>Key Features:</p> <ul> <li>Supports multiple programming languages.</li> <li>Can help with code suggestions, autocompletion, and even writing functions.</li> </ul>"},{"location":"genai-models-by-openai/#9-paraphrasing","title":"9. Paraphrasing","text":"<ul> <li>Use Case: Rewriting a sentence or paragraph while maintaining its meaning.</li> <li>Example: Content rewriting tools, improving text clarity.</li> <li>Model: GPT-4, GPT-3.5.</li> </ul> <p>Key Features:</p> <ul> <li>Helps rephrase sentences in different styles or tones.</li> <li>Useful for improving readability or avoiding plagiarism.</li> </ul>"},{"location":"genai-models-by-openai/#10-sentiment-analysis","title":"10. Sentiment Analysis","text":"<ul> <li>Use Case: Determining the sentiment or emotion expressed in text.</li> <li>Example: Analyzing customer reviews, social media posts.</li> <li>Model: GPT-4, GPT-3.5, Embeddings.</li> </ul> <p>Key Features:</p> <ul> <li>Detects and classifies sentiments (positive, negative, neutral).</li> <li>Can be applied to customer feedback and market research.</li> </ul>"},{"location":"genai-models-by-openai/#11-text-to-speech-tts","title":"11. Text-to-Speech (TTS)","text":"<ul> <li>Use Case: Converting written text into spoken audio.</li> <li>Example: Virtual assistants, audiobook generation.</li> <li>Model: TTS.</li> </ul> <p>Key Features:</p> <ul> <li>Converts text into natural-sounding speech.</li> <li>Useful for accessibility, voice applications, or entertainment.</li> </ul>"},{"location":"genai-models-by-openai/#12-text-based-data-extraction","title":"12. Text-based Data Extraction","text":"<ul> <li>Use Case: Extracting specific data or information from a large volume of text.</li> <li>Example: Extracting entities like dates, names, and locations from documents.</li> <li>Model: GPT-4, GPT-3.5.</li> </ul> <p>Key Features:</p> <ul> <li>Identify and extract relevant data from unstructured text.</li> <li>Used in document processing, legal, and financial analysis.</li> </ul>"},{"location":"genai-models-by-openai/#13-text-moderation","title":"13. Text Moderation","text":"<ul> <li>Use Case: Detecting harmful or inappropriate content in text.</li> <li>Example: Social media moderation, content filtering.</li> <li>Model: Moderation.</li> </ul> <p>Key Features:</p> <ul> <li>Detects hate speech, violence, or sensitive content.</li> <li>Helps in ensuring content safety and adherence to guidelines.</li> </ul>"},{"location":"genai-models-by-openai/#example-curl-for-text-completion","title":"Example cURL for Text Completion","text":"<pre><code>curl https://api.openai.com/v1/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -d '{\n    \"model\": \"text-davinci-003\",\n    \"prompt\": \"Write a short story about a robot learning emotions.\",\n    \"max_tokens\": 150\n  }'\n</code></pre>"},{"location":"genai-models-by-openai/#example-curl-for-chat-conversation","title":"Example cURL for Chat (Conversation)","text":"<pre><code>curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-4\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"What is the weather like today?\"}],\n    \"max_tokens\": 50\n  }'\n</code></pre>"},{"location":"how-to-use-copilot/","title":"how to use copilot","text":"<ul> <li>Only Open your relevant files for while running code suggestion.</li> <li>Provide a top-level comment at top of each file</li> <li>Set Includes and references provide details of whhich dependencies you want to go with, name fof library or version</li> <li>Meaningful names matter, prvide a meaningfule name will help you to get better code suggestion.</li> <li>Provide specific and well- scoped function comments</li> <li>Provide sample code</li> </ul>"},{"location":"overview-of-storage-in-an-operating-system/","title":"Overview of Storage in an Operating System","text":""},{"location":"overview-of-storage-in-an-operating-system/#1-what-is-a-partition","title":"1. What is a Partition?","text":"<p>A partition is a logical division of a hard disk or other storage device. Think of a disk as a blank canvas and a partition as a designated area that you prepare for a specific purpose, like a painting sectioned off for different types of artwork. </p> <p>Partitions allow you to: - Organize data. - Run multiple operating systems on the same physical disk. - Optimize system performance. - Enhance security by isolating different types of data.</p>"},{"location":"overview-of-storage-in-an-operating-system/#2-why-partition-a-disk","title":"2. Why Partition a Disk?","text":"<p>Partitioning a disk is crucial for several reasons: - Separation of Data: You can separate system files from user data, which can help prevent data loss in case the system files become corrupted. - Multiple Operating Systems: You can install different operating systems on separate partitions and choose which one to boot from. - Efficient Management: It helps in organizing data and improves management, especially in large systems. - Backup and Recovery: Easier to back up and restore specific partitions without affecting the entire system.</p>"},{"location":"overview-of-storage-in-an-operating-system/#3-what-is-a-file-system","title":"3. What is a File System?","text":"<p>A file system is a method and data structure that the operating system uses to manage files on a disk. It dictates how data is stored, retrieved, and organized on a partition. Different file systems are optimized for different types of storage devices and use cases.</p> <p>Common file systems include: - NTFS: Used by Windows systems, known for support for large files and advanced features. - FAT32: An older file system compatible with many devices but limited in file size and partition size. - ext4: Commonly used in Linux systems, supporting large files and offering journaling features for reliability. - HFS+: Used by macOS before APFS, now largely replaced by APFS in newer macOS versions.</p>"},{"location":"overview-of-storage-in-an-operating-system/#digging-deeper-storage-terminologies-and-tools","title":"Digging Deeper: Storage Terminologies and Tools","text":""},{"location":"overview-of-storage-in-an-operating-system/#1-disk-vs-partition","title":"1. Disk vs. Partition","text":"<ul> <li>Disk: The entire storage device, such as an HDD (Hard Disk Drive) or SSD (Solid State Drive).</li> <li>Partition: A section of the disk that can be formatted with a file system and used independently.</li> </ul>"},{"location":"overview-of-storage-in-an-operating-system/#2-primary-extended-and-logical-partitions","title":"2. Primary, Extended, and Logical Partitions","text":"<ul> <li>Primary Partitions: These are the main partitions that can be created on a disk. A disk can have up to four primary partitions.</li> <li>Extended Partition: A special type of partition that can hold multiple logical partitions. It's used to overcome the four primary partition limit.</li> <li>Logical Partitions: Partitions created within an extended partition. There can be many logical partitions.</li> </ul>"},{"location":"overview-of-storage-in-an-operating-system/#3-master-boot-record-mbr-and-guid-partition-table-gpt","title":"3. Master Boot Record (MBR) and GUID Partition Table (GPT)","text":"<ul> <li>MBR: An older partitioning scheme that supports disks up to 2 TB and allows up to four primary partitions. It contains a bootloader for the OS and partition table information.</li> <li>GPT: A modern partitioning scheme that supports much larger disks and more partitions. It is part of the UEFI standard, replacing BIOS.</li> </ul>"},{"location":"overview-of-storage-in-an-operating-system/#4-commands-and-tools","title":"4. Commands and Tools","text":"<ul> <li><code>fdisk</code>: A command-line utility to manage disk partitions. It works with MBR and allows you to list, create, delete, and modify partitions.</li> </ul> <p><code>sh   sudo fdisk /dev/sda</code></p> <p>Here, <code>/dev/sda</code> refers to the first disk in the system. Other disks might be <code>/dev/sdb</code>, <code>/dev/sdc</code>, etc.</p> <ul> <li><code>lsblk</code>: Lists information about all available block devices (disks and partitions). It provides a tree view of the disks and their partitions.</li> </ul> <p><code>sh   lsblk</code></p> <ul> <li> <p>Output typically includes the device name, size, type, and mount point.</p> <ul> <li>NAME: The name of the device or partition.</li> <li>MAJ: The major and minor device numbers. These are used by the kernel to identify devices.</li> <li>RM: Indicates whether the device is removable (1 for removable, 0 for non-removable).</li> <li>SIZE: The size of the device or partition.</li> <li>RO: Read-only status (1 for read-only, 0 for writable).</li> <li>TYPE: The type of device (disk, partition, loop device, etc.).</li> <li>MOUNTPOINTS: The directory where the device or partition is mounted, making it accessible to the system.</li> </ul> </li> <li> <p><code>mkfs</code>: Used to create a file system on a partition. For example, to format a partition with the ext4 file system:</p> </li> </ul> <p><code>sh   sudo mkfs.ext4 /dev/sda1</code></p> <p>Here, <code>/dev/sda1</code> represents the partition on which the file system will be created.</p> <ul> <li><code>mount</code> and <code>umount</code>: Used to mount and unmount file systems, respectively. Mounting makes the file system accessible to the OS at a specific directory (mount point).</li> </ul> <p><code>sh   sudo mount /dev/sda1 /mnt</code></p> <p>This mounts the partition <code>/dev/sda1</code> to the <code>/mnt</code> directory.</p>"},{"location":"overview-of-storage-in-an-operating-system/#understanding-output-from-tools","title":"Understanding Output from Tools","text":"<p>When you use tools like <code>fdisk</code> or <code>lsblk</code>, you'll encounter terms like:</p> <ul> <li><code>/dev/sda</code>: The first disk.</li> <li><code>/dev/sda1</code>, <code>/dev/sda2</code>: Partitions on the first disk.</li> <li><code>Size</code>: The size of the disk or partition.</li> <li><code>Type</code>: Indicates whether it's a primary, extended, or logical partition.</li> <li><code>Mountpoint</code>: The directory where the partition is mounted, making its file system accessible.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/","title":"PostgreSQL Installation and Basic Usage","text":""},{"location":"postgreSQL-installation-and-basic-usage/#installation","title":"Installation","text":"<ol> <li>Update Package List:</li> </ol> <p><code>sh    sudo apt update</code></p> <ol> <li>Install PostgreSQL:</li> </ol> <p><code>sh    sudo apt install postgresql postgresql-contrib</code></p> <ol> <li>Start PostgreSQL Service:    <code>sh    sudo systemctl start postgresql</code></li> </ol>"},{"location":"postgreSQL-installation-and-basic-usage/#basic-usage","title":"Basic Usage","text":""},{"location":"postgreSQL-installation-and-basic-usage/#accessing-postgresql","title":"Accessing PostgreSQL","text":"<ul> <li>Command Line:   <code>sh   psql -U postgres</code>   Enter the password you set during installation.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#creating-a-database","title":"Creating a Database","text":"<ol> <li>Open psql: Access the PostgreSQL command line interface.</li> <li>Create Database:    <code>sql    CREATE DATABASE mydb;</code></li> </ol>"},{"location":"postgreSQL-installation-and-basic-usage/#creating-a-user","title":"Creating a User","text":"<ol> <li>Open psql: Access the PostgreSQL command line interface.</li> <li>Create User:    <code>sql    CREATE USER myuser WITH PASSWORD 'mypassword';</code></li> <li>Grant Privileges:    <code>sql    GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser;</code></li> </ol>"},{"location":"postgreSQL-installation-and-basic-usage/#basic-sql-commands","title":"Basic SQL Commands","text":"<ul> <li>Create a Table:</li> </ul> <p><code>sql   CREATE TABLE employees (       id SERIAL PRIMARY KEY,       name VARCHAR(100),       position VARCHAR(50),       salary DECIMAL   );</code></p> <ul> <li>Insert Data:</li> </ul> <p><code>sql   INSERT INTO employees (name, position, salary) VALUES ('Alice', 'Developer', 70000);</code></p> <ul> <li>Select Data:</li> </ul> <p><code>sql   SELECT * FROM employees;</code></p> <ul> <li>Update Data:</li> </ul> <p><code>sql   UPDATE employees SET salary = 75000 WHERE name = 'Alice';</code></p> <ul> <li>Delete Data:   <code>sql   DELETE FROM employees WHERE name = 'Alice';</code></li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#exiting-psql","title":"Exiting psql","text":"<ul> <li>Type <code>\\q</code> and press Enter.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#essential-tools-and-utilities","title":"Essential tools and utilities","text":""},{"location":"postgreSQL-installation-and-basic-usage/#pgadmin","title":"pgAdmin","text":"<ul> <li>Description: pgAdmin is a popular, open-source graphical management tool for PostgreSQL.</li> <li>Features:</li> <li>Visual query builder.</li> <li>Data visualization and analysis.</li> <li>Backup and restore capabilities.</li> <li>Server and database monitoring.</li> <li>Usage: Ideal for database administration and management.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#psql","title":"psql","text":"<ul> <li>Description: psql is the PostgreSQL interactive terminal.</li> <li>Features:</li> <li>Execute SQL commands and scripts.</li> <li>Database navigation and administration.</li> <li>Scripting capabilities.</li> <li>Usage: Powerful command-line tool for developers and DBAs.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pg_dump","title":"pg_dump","text":"<ul> <li>Description: Utility for backing up a PostgreSQL database.</li> <li>Features:</li> <li>Dumps database content into a script or archive file.</li> <li>Supports various formats (plain, custom, directory, tar).</li> <li>Usage:   <code>sh   pg_dump mydb &gt; mydb_backup.sql</code></li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pg_restore","title":"pg_restore","text":"<ul> <li>Description: Utility to restore a PostgreSQL database from an archive created by pg_dump.</li> <li>Features:</li> <li>Supports restoring from custom, directory, and tar formats.</li> <li>Selective restoration of database objects.</li> <li>Usage:   <code>sh   pg_restore -d mydb mydb_backup.tar</code></li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pgbouncer","title":"pgBouncer","text":"<ul> <li>Description: Lightweight connection pooler for PostgreSQL.</li> <li>Features:</li> <li>Reduces database connection overhead.</li> <li>Improves performance by reusing connections.</li> <li>Usage: Suitable for high-concurrency environments.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#postgis","title":"PostGIS","text":"<ul> <li>Description: Spatial database extender for PostgreSQL.</li> <li>Features:</li> <li>Adds support for geographic objects.</li> <li>Spatial queries and analysis.</li> <li>Usage: Essential for GIS (Geographic Information Systems) applications.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pgadmin4","title":"pgAdmin4","text":"<ul> <li>Description: Web-based version of pgAdmin.</li> <li>Features:</li> <li>Modern UI with extensive management capabilities.</li> <li>Multi-user support.</li> <li>Usage: Web-based administration and monitoring tool.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#dbeaver","title":"DBeaver","text":"<ul> <li>Description: Universal database tool that supports various databases, including PostgreSQL.</li> <li>Features:</li> <li>Advanced SQL editor.</li> <li>ERD generation.</li> <li>Data import/export.</li> <li>Usage: Cross-platform database management.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pg_activity","title":"pg_activity","text":"<ul> <li>Description: Command-line tool for PostgreSQL server activity monitoring.</li> <li>Features:</li> <li>Live view of running queries.</li> <li>Performance statistics.</li> <li>Usage: Monitoring and troubleshooting database performance.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#timescaledb","title":"TimescaleDB","text":"<ul> <li>Description: Time-series database built on PostgreSQL.</li> <li>Features:</li> <li>Native PostgreSQL compatibility.</li> <li>Optimized for time-series data.</li> <li>Usage: Suitable for applications dealing with time-series data like monitoring, IoT, and analytics.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pg_repack","title":"pg_repack","text":"<ul> <li>Description: Tool to remove bloat from tables and indexes.</li> <li>Features:</li> <li>Online, non-blocking table repacking.</li> <li>Index rebuilding.</li> <li>Usage: Maintenance tool to optimize database performance.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#pgbadger","title":"pgBadger","text":"<ul> <li>Description: Fast PostgreSQL log analyzer.</li> <li>Features:</li> <li>Generates detailed reports from log files.</li> <li>Performance statistics and insights.</li> <li>Usage: Performance tuning and auditing.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#schemaspy","title":"SchemaSpy","text":"<ul> <li>Description: Java-based tool for analyzing database metadata.</li> <li>Features:</li> <li>Generates visual diagrams of database schema.</li> <li>Detailed documentation of database structures.</li> <li>Usage: Database documentation and schema analysis.</li> </ul>"},{"location":"postgreSQL-installation-and-basic-usage/#additional-resources","title":"Additional Resources","text":"<ul> <li>Documentation: PostgreSQL Official Documentation</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"ide/essential-shell-tools/","title":"Essential shell tolls","text":""},{"location":"ide/essential-shell-tools/#system-resource-monitoring","title":"System resource monitoring","text":""},{"location":"ide/essential-shell-tools/#top","title":"top","text":"<ul> <li>Description: Provides a dynamic real-time view of the system\u2019s resource usage, including CPU, memory, and process information.</li> <li>Installation: <code>top</code> is usually pre-installed on most Linux distributions.</li> <li>Usage: Run <code>top</code> in the terminal. Press <code>q</code> to quit. You can press <code>1</code> to view CPU usage per core.</li> </ul>"},{"location":"ide/essential-shell-tools/#htop","title":"htop","text":"<ul> <li>Description: An enhanced version of <code>top</code> with a more user-friendly, ncurses-based interface that includes a visual representation of CPU and memory usage.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install htop</code></li> <li>Usage: Run <code>htop</code> in the terminal. Use the arrow keys to navigate, and press <code>F10</code> to exit.</li> </ul>"},{"location":"ide/essential-shell-tools/#vmstat","title":"vmstat","text":"<ul> <li>Description: Reports information about processes, memory, paging, block IO, traps, and CPU activity.</li> <li>Installation: <code>vmstat</code> is usually pre-installed.</li> <li>Usage: Run <code>vmstat 1</code> to get a continuous report every second. Press <code>Ctrl+C</code> to stop.</li> </ul>"},{"location":"ide/essential-shell-tools/#iostat","title":"iostat","text":"<ul> <li>Description: Reports CPU and I/O statistics, which helps in understanding the load on the system's disks.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install sysstat</code></li> <li>Usage: Run <code>iostat 1</code> to get continuous reports every second. Press <code>Ctrl+C</code> to stop.</li> </ul>"},{"location":"ide/essential-shell-tools/#sar","title":"sar","text":"<ul> <li>Description: Collects, reports, and saves system activity information. Useful for historical data analysis.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install sysstat</code></li> <li>Usage: To collect data: <code>sar -u 1 3</code> (CPU usage every second for 3 iterations). Use <code>sar -o file</code> to save to a file and <code>sar -f file</code> to read from it.</li> </ul>"},{"location":"ide/essential-shell-tools/#dstat","title":"dstat","text":"<ul> <li>Description: Versatile resource statistics tool that can replace vmstat, iostat, netstat, and ifstat.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install dstat</code></li> <li>Usage: Run <code>dstat</code> to see a live report of various system metrics. Use <code>dstat -cnd</code> to get CPU, network, and disk stats.</li> </ul>"},{"location":"ide/essential-shell-tools/#nload","title":"nload*","text":"<ul> <li>Description: Provides a visual representation of incoming and outgoing traffic separately.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install nload</code></li> <li>Usage: Run <code>nload</code> to see real-time network traffic. Use arrow keys to switch between network interfaces.</li> </ul>"},{"location":"ide/essential-shell-tools/#glances","title":"glances","text":"<ul> <li>Description: A cross-platform monitoring tool that provides a comprehensive overview of system resources, including CPU, memory, network, and disk usage.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install glances</code></li> <li>Usage: Run <code>glances</code> in the terminal. Use <code>q</code> to quit.</li> </ul>"},{"location":"ide/essential-shell-tools/#free","title":"free","text":"<ul> <li>Description: Displays information about total, used, free, shared, and buffered memory.</li> <li>Installation: <code>free</code> is usually pre-installed.</li> <li>Usage: Run <code>free -h</code> for human-readable format. Use <code>free -m</code> for memory in megabytes.</li> </ul>"},{"location":"ide/essential-shell-tools/#iftop","title":"iftop","text":"<ul> <li>Description: Displays bandwidth usage on an interface in real-time.</li> <li>Installation: </li> <li>For Debian/Ubuntu: <code>sudo apt-get install iftop</code></li> <li>Usage: Run <code>sudo iftop</code> to monitor network traffic. Press <code>q</code> to quit.</li> </ul>"},{"location":"ide/vscode-extensions/","title":"vscode extensions","text":""}]}